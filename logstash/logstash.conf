input {
	# file {
	# 	type => "syslog"
	# 	path => [ "/var/log/*.log", "/var/log/messages", "/var/log/syslog" ]
	# 	path => "/var/log/messages"
	# 	start_position => "beginning"
	# }
  beats {
    port => 5044
    host => "0.0.0.0"
  }
}

filter {
# An filter may change the regular expression used to match a record or a field,
# alter the value of parsed fields, add or remove fields, etc.
#
#	if [type] == "syslog" {
#		grok {
#			#patterns_dir => ["/usr/local/etc/logstash/patterns"]
#			match => { "message" => "(<%{POSINT:syslog_pri}>)?%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} (%{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:syslog_message}|%{GREEDYDATA:syslog_message})" }
#		}
#		mutate {
#			remove_field => [ "syslog_hostname", "syslog_message" ]
#		}
#		date {
#			match => [ "syslog_timestamp","MMM  d HH:mm:ss", "MMM dd HH:mm:ss", "ISO8601" ]
#		}
#		syslog_pri { }
#	}
  if [fields][logtype] == "firewall_hgw" {
    grok {
      patterns_dir => [ "/usr/local/etc/logstash/patterns" ]
      match => {
        "message" => [
          "%{SYSLOGBASE} %{HGWLOG}",
          "%{SYSLOGBASE} %{GREEDYDATA:raw_message}"
        ]
      }
    }
    if "_grokparsefailure" not in [tags] {
      mutate {
        remove_field => [ "message" ]
      }
    }
    date {
      match => [ "hgw_timestamp", "yyyy/M/d HH:mm:ss" ]
    }
    if [source_ip] {
      mutate {
        add_field => { "source_host" => "%{source_ip}" }
      }
      geoip {
        source => "source_ip"
        target => "geoip"
      }
      dns {
        reverse => [ "source_host" ]
        action => "replace"
        nameserver => [ "192.168.1.251", "192.168.1.247" ]            # CHANGEME
        failed_cache_size => 1000
        failed_cache_ttl => 300
        hit_cache_size => 1000
        hit_cache_ttl => 300
      }
    }
  }
}

output {
  # Emit events to stdout for easy debugging of what is going through
  # logstash.
  # stdout {
  #   codec => rubydebug
  # }

  # This will use elasticsearch to store your logs.
  elasticsearch {
    hosts => [ "localhost:9200" ]       # CHANGEME
  }
}
